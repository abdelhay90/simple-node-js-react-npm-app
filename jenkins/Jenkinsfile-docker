def getRepoURL() {
  sh "git config --get remote.origin.url > .git/remote-url"
  return readFile(".git/remote-url").trim()
}

def getCommitSha() {
  sh "git rev-parse HEAD > .git/current-commit"
  return readFile(".git/current-commit").trim()
}

def updateGithubCommitStatus(build) {
  // workaround https://issues.jenkins-ci.org/browse/JENKINS-38674
  repoUrl = getRepoURL()
  commitSha = getCommitSha()

  step([
    $class: 'GitHubCommitStatusSetter',
    reposSource: [$class: "ManuallyEnteredRepositorySource", url: repoUrl],
    commitShaSource: [$class: "ManuallyEnteredShaSource", sha: commitSha],
    errorHandlers: [[$class: 'ShallowAnyErrorHandler']]
  ])
}

pipeline {

  environment {
    registry = "aabdelhay/test-app"
    registryCredential = 'dockerhub'
    dockerImage = ''
    CI='true'
  }
  agent any
  tools {nodejs "node"}
  stages {
    stage('Install') {
       steps {
       updateGithubCommitStatus(currentBuild)
         sh 'npm install'
       }
    }
    stage('Lint') {
      steps {
      updateGithubCommitStatus(currentBuild)
        sh 'npm run lint'
      }
    }
    stage('Test') {
      steps {
        updateGithubCommitStatus(currentBuild)
        sh 'npm test'
      }
    }
    stage('Build image and Deploy') {
      when {
        branch 'master'
      }
      steps{
        script {
          updateGithubCommitStatus(currentBuild)
          dockerImage = docker.build registry + ":$BUILD_NUMBER"
          sh './jenkins/scripts/clean-docker.sh'
          sh 'docker run -d -p 80:80 $registry:$BUILD_NUMBER'
        }
      }
    }

  }
  post {
          success {
            updateGithubCommitStatus(currentBuild)
          }
          failure {
            updateGithubCommitStatus(currentBuild)
          }
  }
}
