def getBranchName(){
    sh 'git name-rev --name-only HEAD > .git/branch-name'
    return readFile(".git/branch-name").trim()
}

def getRepoURL() {
  sh "git config --get remote.origin.url > .git/remote-url"
  return readFile(".git/remote-url").trim()
}

def getCommitSha() {
  sh "git rev-parse HEAD > .git/current-commit"
  return readFile(".git/current-commit").trim()
}

def updateGithubCommitStatus(build) {
  // workaround https://issues.jenkins-ci.org/browse/JENKINS-38674
  repoUrl = getRepoURL()
  commitSha = getCommitSha()

  step([
    $class: 'GitHubCommitStatusSetter',
    reposSource: [$class: "ManuallyEnteredRepositorySource", url: repoUrl],
    commitShaSource: [$class: "ManuallyEnteredShaSource", sha: commitSha],
    errorHandlers: [[$class: 'ShallowAnyErrorHandler']]
  ])
}

pipeline {

  environment {
    registry = "aabdelhay/test-app"
    registryCredential = 'dockerhub'
    dockerImage = ''
    branch_name = getBranchName()
    // sh(script: 'rev=$(git name-rev --name-only HEAD)', returnStdout: true).trim()
    CI='true'

  }
  agent any
  tools {nodejs "node"}
  stages {
    stage('Install') {
       steps {
         updateGithubCommitStatus(currentBuild)
         println branch_name
         sh 'npm install'
       }
       post {
        failure {
            jiraSendBuildInfo site: 'super-dev.atlassian.net'
        }
       }
    }
    stage('Lint') {
      steps {
      updateGithubCommitStatus(currentBuild)
        sh 'npm run lint'
      }
      post {
              failure {
                  jiraSendBuildInfo site: 'super-dev.atlassian.net'
              }
             }
    }
    stage('Test') {
      steps {
        updateGithubCommitStatus(currentBuild)
        sh 'npm test'
      }
      post {
              failure {
                  jiraSendBuildInfo site: 'super-dev.atlassian.net'
              }
             }
    }
    stage('Build image and Deploy') {
      when {
        expression { branch_name ==~ 'remotes/origin/master'}
      }
      steps{
        script {
          updateGithubCommitStatus(currentBuild)
          sh './jenkins/scripts/clean-docker.sh'
          dockerImage = docker.build registry + ":$BUILD_NUMBER"
          sh 'docker run -d -p 80:80 $registry:$BUILD_NUMBER'
        }
      }
      post {
              failure {
                  jiraSendBuildInfo site: 'super-dev.atlassian.net'
              }
             }
    }
    }
      post {
              success {
                updateGithubCommitStatus(currentBuild)
                jiraSendBuildInfo site: 'super-dev.atlassian.net'

              }
              failure {
                updateGithubCommitStatus(currentBuild)
                jiraSendBuildInfo site: 'super-dev.atlassian.net'
              }
      }
  }
